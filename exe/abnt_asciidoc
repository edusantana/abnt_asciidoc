#!/usr/bin/env ruby

require 'gli'
require 'abnt_asciidoc'

include GLI::App

program_desc 'Gera documentos na norma da ABNT a partir de textos escritos em Asciidoc.'

version AbntAsciidoc::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Testa alguma coisa'
command [:test] do |c|

  c.action do |global_options,options,args|
    templates = File.expand_path('../../lib/templates', __FILE__)
    #Liquid::Template.file_system = Liquid::LocalFileSystem.new(templates, '.liquid')
    #puts Liquid::Template.parse("{% include 'informacoes' %}").render()


    Liquid::Template.file_system = Liquid::LocalFileSystem.new(templates, "%s.tex.liquid")
    puts Liquid::Template.file_system
    puts Liquid::Template.parse("{% include 'xxx' %}").render()
  end

end

desc 'Gera um trabalho acadêmico com as normas da ABNT: monografia, dissertação, tese.'
long_desc <<EOS
A partir dos parâmetros passados cria um arquivo Latex com a biblioteca abntex2,
em conformidade com os padrões da ABNT para Trabalhos Acadêmicos.
Os arquivos de texto dos capítulos são convertidos de Asciidoc para Latex,
utilizando `asciidoctor-latex`. Depois será necessário utilizar outro comando
para gerar o pdf.
EOS
arg :capitulos, [:optional, :multiple]
arg_name "[capitulo-asciidoc]*"
command [:ta, 'trabalho-academico'] do |c|

  c.desc "Texto do resumo."
  c.flag [:r,:resumo], :arg_name => '"texto"'

  c.desc "Palavras-chave do resumo."
  c.flag [:p,'palavras-chave'], :arg_name => "'p1. p2. p3.'"

  c.desc "Texto do resumo em inglês (abstract)."
  c.flag [:ri, :abstract],  :arg_name => '"texto"'

  c.long_desc "As palavras-chave são separadas por ponto."
  c.desc "Palavras-chave do resumo em inglês (keywords)."
  c.flag [:k, :keywords], :arg_name => "'p1. p2. p3.'"

  c.desc "Gera os agradecimentos."
  c.flag [:a,:agradecimentos],  :arg_name => '"texto"'

  c.desc "Gera a dedicatória."
  c.flag [:d,:dedicatoria], :arg_name => '"texto"'

  c.desc "Gera a epígrafe."
  c.flag [:e,:epigrafe], :arg_name => '"texto"'

  c.desc "Lista as ilustrações."
  c.switch :ilustracoes, :negatable => false

  c.desc "Lista as tabelas."
  c.switch :tabelas, :negatable => false

  c.desc "Lista as siglas. As siglas são separadas por ponto."
  c.flag :siglas, :arg_name => '"A:aaa. B:bbb."'

  # Os simbolos não serão utilizados nesta versão.
  #c.desc "Lista os simbolos."
  #c.flag ['lista-simbolos', 'lb']

  c.desc "Arquivo contendo informações sobre o documento."
  c.flag [:i, :info], :arg_name => 'info-file', :default_value => 'config/1-informacoes.yaml'
  c.desc "Arquivo contendo informações para o resumo e abstract."
  c.flag [:resumos], :arg_name => 'resumo-file', :default_value => 'config/2-resumos.yaml'


  c.desc "Gera a capa do trabalho. As informações serão lidas do arquivo de informação. Ver --info."
  c.switch :capa

  c.action do |global_options,options,args|

    templates = File.expand_path('../../lib/templates', __FILE__)
    Liquid::Template.file_system = Liquid::LocalFileSystem.new(templates, "%s.tex.liquid")
    info = YAML.load_file(options[:info])
    resumos = YAML.load_file(options[:resumos])

    puts Liquid::Template.parse(IO.read("#{templates}/abntex2-modelo-trabalho-academico.tex.liquid")).render(info)

    if options['capa']
      info['data'] = Time.now
      #info = IO.read()
      puts Liquid::Template.parse(IO.read("#{templates}/informacoes.tex.liquid")).render(info)
    end

    puts Liquid::Template.parse(IO.read("#{templates}/agradecimentos.tex.liquid")).render(options) if options['agradecimentos']
    puts Liquid::Template.parse(IO.read("#{templates}/dedicatoria.tex.liquid")).render(options) if options['dedicatoria']
    puts Liquid::Template.parse(IO.read("#{templates}/epigrafe.tex.liquid")).render(options) if options['epigrafe']
    puts Liquid::Template.parse(IO.read("#{templates}/resumo.tex.liquid")).render(options) if options['resumo']
    puts Liquid::Template.parse(IO.read("#{templates}/lista-ilustracoes.tex.liquid")).render(options) if options['lista-ilustracoes']
    puts Liquid::Template.parse(IO.read("#{templates}/lista-tabelas.tex.liquid")).render(options) if options['lista-tabelas']

    if options['lista-siglas']
      # format: "A:aaa. B:bbb."
      siglas = {}
      options['lista-siglas'].split(/\./).each do |pair|
        sigla,descricao = pair.split(/:/)
        siglas[sigla.lstrip] = descricao.lstrip
        puts "adding #{sigla} - #{descricao}"
      end

      puts "options['lista-siglas'] : #{options['lista-siglas']}"
      puts "options['lista-siglas'].split(/\./) : #{options['lista-siglas'].split(/\./)}"

      options['lista-siglas']
      puts Liquid::Template.parse(IO.read("#{templates}/lista-siglas.tex.liquid")).render('siglas' => siglas)
    end

    # Converte arquivos dos capítulos em asciidoc e converte para Latex imprimindo-os na saída
    if args
      puts Liquid::Template.parse(IO.read("#{templates}/textuais.tex.liquid")).render()
      puts

      args.each do |capitulo|
        texto_em_asciidoc = IO.read(capitulo)
        COMANDO_CONVERSAO_CAPITULO = "asciidoctor-latex -a header=no -"
        Open3.popen3(COMANDO_CONVERSAO_CAPITULO) {|stdin, stdout, stderr, wait_thr|
          pid = wait_thr.pid # pid of the started process.
          stdin.puts texto_em_asciidoc
          stdin.close
          puts stdout.read  # texto convertivo para Latex
        }
      end
    end

  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
